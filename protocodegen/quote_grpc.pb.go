// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: quote.proto

package protocodegen

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuoteApiClient is the client API for QuoteApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteApiClient interface {
	Create(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*Quote, error)
	Read(ctx context.Context, in *QuoteFilter, opts ...grpc.CallOption) (*QuoteList, error)
	ReadOne(ctx context.Context, in *QuoteID, opts ...grpc.CallOption) (*Quote, error)
	Update(ctx context.Context, in *QuoteUpdateRequest, opts ...grpc.CallOption) (*Quote, error)
	Delete(ctx context.Context, in *QuoteID, opts ...grpc.CallOption) (*empty.Empty, error)
}

type quoteApiClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteApiClient(cc grpc.ClientConnInterface) QuoteApiClient {
	return &quoteApiClient{cc}
}

func (c *quoteApiClient) Create(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/quote.QuoteApi/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteApiClient) Read(ctx context.Context, in *QuoteFilter, opts ...grpc.CallOption) (*QuoteList, error) {
	out := new(QuoteList)
	err := c.cc.Invoke(ctx, "/quote.QuoteApi/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteApiClient) ReadOne(ctx context.Context, in *QuoteID, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/quote.QuoteApi/ReadOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteApiClient) Update(ctx context.Context, in *QuoteUpdateRequest, opts ...grpc.CallOption) (*Quote, error) {
	out := new(Quote)
	err := c.cc.Invoke(ctx, "/quote.QuoteApi/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteApiClient) Delete(ctx context.Context, in *QuoteID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/quote.QuoteApi/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteApiServer is the server API for QuoteApi service.
// All implementations must embed UnimplementedQuoteApiServer
// for forward compatibility
type QuoteApiServer interface {
	Create(context.Context, *QuoteRequest) (*Quote, error)
	Read(context.Context, *QuoteFilter) (*QuoteList, error)
	ReadOne(context.Context, *QuoteID) (*Quote, error)
	Update(context.Context, *QuoteUpdateRequest) (*Quote, error)
	Delete(context.Context, *QuoteID) (*empty.Empty, error)
	mustEmbedUnimplementedQuoteApiServer()
}

// UnimplementedQuoteApiServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteApiServer struct {
}

func (UnimplementedQuoteApiServer) Create(context.Context, *QuoteRequest) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedQuoteApiServer) Read(context.Context, *QuoteFilter) (*QuoteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedQuoteApiServer) ReadOne(context.Context, *QuoteID) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedQuoteApiServer) Update(context.Context, *QuoteUpdateRequest) (*Quote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedQuoteApiServer) Delete(context.Context, *QuoteID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedQuoteApiServer) mustEmbedUnimplementedQuoteApiServer() {}

// UnsafeQuoteApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteApiServer will
// result in compilation errors.
type UnsafeQuoteApiServer interface {
	mustEmbedUnimplementedQuoteApiServer()
}

func RegisterQuoteApiServer(s grpc.ServiceRegistrar, srv QuoteApiServer) {
	s.RegisterService(&QuoteApi_ServiceDesc, srv)
}

func _QuoteApi_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteApiServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quote.QuoteApi/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteApiServer).Create(ctx, req.(*QuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteApi_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteApiServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quote.QuoteApi/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteApiServer).Read(ctx, req.(*QuoteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteApi_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteApiServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quote.QuoteApi/ReadOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteApiServer).ReadOne(ctx, req.(*QuoteID))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteApi_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteApiServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quote.QuoteApi/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteApiServer).Update(ctx, req.(*QuoteUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteApi_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteApiServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quote.QuoteApi/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteApiServer).Delete(ctx, req.(*QuoteID))
	}
	return interceptor(ctx, in, info, handler)
}

// QuoteApi_ServiceDesc is the grpc.ServiceDesc for QuoteApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quote.QuoteApi",
	HandlerType: (*QuoteApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _QuoteApi_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _QuoteApi_Read_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _QuoteApi_ReadOne_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _QuoteApi_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _QuoteApi_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quote.proto",
}
